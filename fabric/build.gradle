plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}


dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_api_version}"
    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
    //modImplementation fernflowerDecompilerClasspath("curse.maven:minecraft-comes-alive-reborn-535291:6805928")
    modImplementation include("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}


processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: inputs.properties.version
    }
}


shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}
remapJar {
    input.set shadowJar.archiveFile
}
