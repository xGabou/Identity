plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

// === Génération du mods.toml ===
tasks.register("generateModMetadata", ProcessResources) {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: "[${minecraft_version},)",
            neo_version            : neoforge_version,
            neo_version_range      : "[${neoforge_version},)",
            loader_version_range   : neoforge_version_range,

            mod_id          : mod_id,
            mod_name        : mod_name,
            mod_license     : mod_license,
            mod_version     : mod_version,
            mod_authors     : mod_authors,
            mod_description : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from("src/main/templates")
    into("build/generated/sources/modMetadata")
}

// inclure le fichier généré comme ressource
sourceSets.main.resources.srcDir(tasks.named("generateModMetadata"))

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
